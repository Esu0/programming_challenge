mod input {
    use std::{
        cell::RefCell,
        fmt::Debug,
        io::Read,
        str::{FromStr, SplitWhitespace},
    };

    fn tokens_init() -> RefCell<SplitWhitespace<'static>> {
        let mut buf = String::new();
        std::io::stdin().read_to_string(&mut buf).unwrap();
        RefCell::new(String::leak(buf).split_whitespace())
    }

    fn next_token() -> Option<&'static str> {
        thread_local! {
            static TOKENS: RefCell<SplitWhitespace<'static>> = tokens_init();
        }
        TOKENS.with_borrow_mut(|tokens| tokens.next())
    }

    #[allow(dead_code)]
    pub fn scan<T: FromStr>() -> Option<T>
    where
        T::Err: Debug,
    {
        next_token().map(|s| s.parse().unwrap())
    }

    #[macro_export]
    macro_rules! scan {
        ($t:ty $(,)?) => {
            $crate::input::scan::<$t>().unwrap()
        };
        ($($t:ty),+ $(,)?) => {
            ($($crate::input::scan::<$t>().unwrap()),*)
        };
    }
}

static ANSWERS: [[f64; 100]; 10] = [
    [100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, ],
    [100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, 100.000000000, ],
    [100.000000000, 77.777777778, 62.962962963, 50.617283951, 40.740740741, 32.784636488, 26.383173297, 21.231519585, 17.085810090, 13.749597792, 11.064821871, 8.904281002, 7.165611987, 5.766439214, 4.640471919, 3.734363414, 3.005183600, 2.418385002, 1.946165957, 1.566153416, 1.260342939, 1.014245672, 0.816201886, 0.656828554, 0.528574801, 0.425364151, 0.342306634, 0.275467106, 0.221678808, 0.178393328, 0.143559864, 0.115528057, 0.092969801, 0.074816318, 0.060207523, 0.048451273, 0.038990573, 0.031377190, 0.025250413, 0.020319963, 0.016352243, 0.013159269, 0.010589762, 0.008521982, 0.006857962, 0.005518862, 0.004441237, 0.003574031, 0.002876158, 0.002314553, 0.001862609, 0.001498912, 0.001206231, 0.000970700, 0.000781159, 0.000628628, 0.000505881, 0.000407101, 0.000327610, 0.000263640, 0.000212161, 0.000170734, 0.000137396, 0.000110568, 0.000088978, 0.000071604, 0.000057623, 0.000046371, 0.000037317, 0.000030030, 0.000024166, 0.000019448, 0.000015650, 0.000012594, 0.000010135, 0.000008156, 0.000006564, 0.000005282, 0.000004251, 0.000003421, 0.000002753, 0.000002215, 0.000001783, 0.000001435, 0.000001154, 0.000000929, 0.000000748, 0.000000602, 0.000000484, 0.000000390, 0.000000314, 0.000000252, 0.000000203, 0.000000163, 0.000000131, 0.000000106, 0.000000085, 0.000000069, 0.000000055, 0.000000044, ],
    [100.000000000, 62.500000000, 40.625000000, 26.562500000, 17.382812500, 11.376953125, 7.446289062, 4.873657227, 3.189849854, 2.087783813, 1.366472244, 0.894367695, 0.585371256, 0.383130461, 0.250762142, 0.164125953, 0.107421831, 0.070308501, 0.046017511, 0.030118852, 0.019713045, 0.012902355, 0.008444701, 0.005527129, 0.003617553, 0.002367719, 0.001549692, 0.001014287, 0.000663859, 0.000434502, 0.000284385, 0.000186132, 0.000121825, 0.000079736, 0.000052188, 0.000034157, 0.000022356, 0.000014632, 0.000009577, 0.000006268, 0.000004103, 0.000002685, 0.000001757, 0.000001150, 0.000000753, 0.000000493, 0.000000323, 0.000000211, 0.000000138, 0.000000090, 0.000000059, 0.000000039, 0.000000025, 0.000000017, 0.000000011, 0.000000007, 0.000000005, 0.000000003, 0.000000002, 0.000000001, 0.000000001, 0.000000001, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, ],
    [100.000000000, 52.000000000, 28.000000000, 15.200000000, 8.288000000, 4.524800000, 2.471680000, 1.350400000, 0.737843200, 0.403159040, 0.220289024, 0.120367923, 0.065770209, 0.035937501, 0.019636614, 0.010729645, 0.005862787, 0.003203486, 0.001750418, 0.000956446, 0.000522612, 0.000285560, 0.000156033, 0.000085258, 0.000046586, 0.000025455, 0.000013909, 0.000007600, 0.000004153, 0.000002269, 0.000001240, 0.000000677, 0.000000370, 0.000000202, 0.000000111, 0.000000060, 0.000000033, 0.000000018, 0.000000010, 0.000000005, 0.000000003, 0.000000002, 0.000000001, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, ],
    [100.000000000, 44.444444444, 20.370370370, 9.413580247, 4.372427984, 2.036179698, 0.949502743, 0.443077465, 0.206832990, 0.096569692, 0.045092428, 0.021056584, 0.009832938, 0.004591816, 0.002144315, 0.001001369, 0.000467628, 0.000218377, 0.000101980, 0.000047624, 0.000022240, 0.000010386, 0.000004850, 0.000002265, 0.000001058, 0.000000494, 0.000000231, 0.000000108, 0.000000050, 0.000000023, 0.000000011, 0.000000005, 0.000000002, 0.000000001, 0.000000001, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, ],
    [100.000000000, 38.775510204, 15.451895044, 6.205747605, 2.504908669, 1.014033268, 0.411271785, 0.166996224, 0.067857627, 0.027585780, 0.011217418, 0.004562213, 0.001855687, 0.000754854, 0.000307071, 0.000124918, 0.000050818, 0.000020674, 0.000008410, 0.000003422, 0.000001392, 0.000000566, 0.000000230, 0.000000094, 0.000000038, 0.000000016, 0.000000006, 0.000000003, 0.000000001, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, ],
    [100.000000000, 34.375000000, 12.109375000, 4.296875000, 1.531982422, 0.547790527, 0.196266174, 0.070416927, 0.025288761, 0.009088032, 0.003267499, 0.001175175, 0.000422754, 0.000152104, 0.000054732, 0.000019696, 0.000007088, 0.000002551, 0.000000918, 0.000000330, 0.000000119, 0.000000043, 0.000000015, 0.000000006, 0.000000002, 0.000000001, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, ],
    [100.000000000, 30.864197531, 9.739368999, 3.094040543, 0.987315619, 0.315933471, 0.101296914, 0.032525125, 0.010454532, 0.003363070, 0.001082497, 0.000348588, 0.000112291, 0.000036181, 0.000011660, 0.000003758, 0.000001212, 0.000000391, 0.000000126, 0.000000041, 0.000000013, 0.000000004, 0.000000001, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, ],
    [100.000000000, 28.000000000, 8.000000000, 2.300000000, 0.664000000, 0.192200000, 0.055740000, 0.016188000, 0.004706400, 0.001369460, 0.000398746, 0.000116163, 0.000033855, 0.000009870, 0.000002878, 0.000000839, 0.000000245, 0.000000071, 0.000000021, 0.000000006, 0.000000002, 0.000000001, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, ],
];

fn main() {
    while let Some(k) = input::scan::<u8>() {
        let n = scan!(u8);
        println!("{:.9}", ANSWERS[k as usize][(n - 1) as usize]);
    }
}
